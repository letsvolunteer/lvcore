/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InvitationRequest;
import io.swagger.model.Event;
import io.swagger.model.Invitation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-26T05:19:37.458Z")

@Api(value = "events", description = "the events API")
public interface EventsApi {

    @ApiOperation(value = "Creates an event", nickname = "createEvent", notes = "", response = Event.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = Event.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Event> createEvent(@ApiParam(value = "The event details" ,required=true )  @Valid @RequestBody Event event);


    @ApiOperation(value = "Delete an event", nickname = "deleteEventById", notes = "", tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEventById(@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId);


    @ApiOperation(value = "Inviting volunteers", nickname = "eventsEventIdInvitationsPost", notes = "", response = Invitation.class, tags={ "Event Invitations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "invitation sent", response = Invitation.class),
        @ApiResponse(code = 400, message = "invalid email address"),
        @ApiResponse(code = 404, message = "event not found or not accepting volunteers") })
    @RequestMapping(value = "/events/{eventId}/invitations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Invitation> eventsEventIdInvitationsPost(@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId,@ApiParam(value = ""  )  @Valid @RequestBody InvitationRequest invitationRequest);


    @ApiOperation(value = "Gets an event by Id", nickname = "getEventById", notes = "", response = Event.class, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = Event.class),
        @ApiResponse(code = 404, message = "Event not found") })
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Event> getEventById(@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId,@ApiParam(value = "true if the event details are needed.", defaultValue = "false") @Valid @RequestParam(value = "withDetails", required = false, defaultValue="false") Boolean withDetails);


    @ApiOperation(value = "Return events based on filter criteria", nickname = "getEvents", notes = "Return list of events based on query parameters", response = Event.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Event.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid query parameter combination.") })
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Event>> getEvents(@ApiParam(value = "", allowableValues = "location, category") @Valid @RequestParam(value = "filterBy", required = false) String filterBy,@ApiParam(value = "") @Valid @RequestParam(value = "filterFor", required = false) String filterFor,@ApiParam(value = "", allowableValues = "distance, date") @Valid @RequestParam(value = "sortBy", required = false) String sortBy);


    @ApiOperation(value = "Updates an event", nickname = "updateEvent", notes = "", response = Event.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = Event.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Event> updateEvent(@ApiParam(value = "The id of the event to be updated",required=true) @PathVariable("eventId") String eventId,@ApiParam(value = "The updated event details" ,required=true )  @Valid @RequestBody Event event);

}
