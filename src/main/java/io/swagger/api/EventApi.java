/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.VolunteerRequestStatus;
import io.swagger.model.VolunteerRequest;
import io.swagger.model.ErrorResponse;
import io.swagger.model.ParticipantRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-26T05:19:37.458Z")

@Api(value = "event", description = "the event API")
public interface EventApi {

    @ApiOperation(value = "send request to volunteer", nickname = "requestToVolunteer", notes = "send request to volunteer for the event", response = ParticipantRequest.class, tags={ "Event Requests", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "request successfully sent", response = ParticipantRequest.class),
        @ApiResponse(code = 400, message = "validation errors", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "event non-existant or not accepting volunteers", response = ErrorResponse.class) })
    @RequestMapping(value = "/event/{eventId}/requests",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<ParticipantRequest> requestToVolunteer(@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId,@ApiParam(value = ""  )  @Valid @RequestBody VolunteerRequest data);


    @ApiOperation(value = "response to volunteering request", nickname = "respondToVolunteerRequest", notes = "", response = ParticipantRequest.class, tags={ "Event Requests", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "response to volunteer request", response = ParticipantRequest.class),
        @ApiResponse(code = 400, message = "invalid status value", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "non-existant event id", response = ErrorResponse.class) })
    @RequestMapping(value = "/event/{eventId}/requests",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<ParticipantRequest> respondToVolunteerRequest(@ApiParam(value = "",required=true) @PathVariable("eventId") String eventId,@ApiParam(value = ""  )  @Valid @RequestBody VolunteerRequestStatus data);

}
