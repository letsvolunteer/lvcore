/*
 * This file is generated by jOOQ.
 */
package io.lvcore.db.model.tables.tables;


import io.lvcore.db.model.tables.Indexes;
import io.lvcore.db.model.tables.Keys;
import io.lvcore.db.model.tables.Lvcore;
import io.lvcore.db.model.tables.tables.records.EventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 235436382;

    /**
     * The reference instance of <code>lvcore.EVENT</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>lvcore.EVENT.id</code>.
     */
    public final TableField<EventRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>lvcore.EVENT.host_id</code>.
     */
    public final TableField<EventRecord, String> HOST_ID = createField("host_id", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>lvcore.EVENT.title</code>.
     */
    public final TableField<EventRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lvcore.EVENT.description</code>.
     */
    public final TableField<EventRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>lvcore.EVENT.event_date_time</code>.
     */
    public final TableField<EventRecord, Timestamp> EVENT_DATE_TIME = createField("event_date_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>lvcore.EVENT.address1</code>.
     */
    public final TableField<EventRecord, String> ADDRESS1 = createField("address1", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>lvcore.EVENT.address2</code>.
     */
    public final TableField<EventRecord, String> ADDRESS2 = createField("address2", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>lvcore.EVENT.city</code>.
     */
    public final TableField<EventRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>lvcore.EVENT.state</code>.
     */
    public final TableField<EventRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>lvcore.EVENT.zipcode</code>.
     */
    public final TableField<EventRecord, String> ZIPCODE = createField("zipcode", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>lvcore.EVENT.country</code>.
     */
    public final TableField<EventRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR(5).defaultValue(org.jooq.impl.DSL.inline("US", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>lvcore.EVENT.category</code>.
     */
    public final TableField<EventRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>lvcore.EVENT.meeting_instructions</code>.
     */
    public final TableField<EventRecord, String> MEETING_INSTRUCTIONS = createField("meeting_instructions", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>lvcore.EVENT.banner_url</code>.
     */
    public final TableField<EventRecord, String> BANNER_URL = createField("banner_url", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>lvcore.EVENT.event_url</code>.
     */
    public final TableField<EventRecord, String> EVENT_URL = createField("event_url", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>lvcore.EVENT.skills</code>.
     */
    public final TableField<EventRecord, String> SKILLS = createField("skills", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>lvcore.EVENT.volunteer_count_req</code>.
     */
    public final TableField<EventRecord, Integer> VOLUNTEER_COUNT_REQ = createField("volunteer_count_req", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lvcore.EVENT.created_on</code>.
     */
    public final TableField<EventRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>lvcore.EVENT.modified_on</code>.
     */
    public final TableField<EventRecord, Timestamp> MODIFIED_ON = createField("modified_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>lvcore.EVENT</code> table reference
     */
    public Event() {
        this(DSL.name("EVENT"), null);
    }

    /**
     * Create an aliased <code>lvcore.EVENT</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>lvcore.EVENT</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Event(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lvcore.LVCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_HOST_ID_FK, Indexes.EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventRecord>> getKeys() {
        return Arrays.<UniqueKey<EventRecord>>asList(Keys.KEY_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventRecord, ?>>asList(Keys.HOST_ID_FK);
    }

    public User user() {
        return new User(this, Keys.HOST_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }
}
